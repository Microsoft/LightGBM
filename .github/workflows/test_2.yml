name: Test 2

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    name: Test 2
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 5
          submodules: true
      - name: Setup and run tests on Linux and macOS
        if: matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sleep 20
          exit 0
  all-successful:
    # https://github.community/t/is-it-possible-to-require-all-github-actions-tasks-to-pass-without-enumerating-them/117957/4?u=graingert
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Note that all tests succeeded
      shell: python
      run: |
          import json
          from os import environ
          from sys import exit
          from time import sleep
          from urllib import request

          def get_runs():
              with request.urlopen("https://api.github.com/repos/microsoft/LightGBM/actions/workflows/test_1.yml/runs") as url:
                  data = json.loads(url.read().decode())
              pr_runs = []
              if environ.get("GITHUB_EVENT_NAME", "").lower() == "pull_request":
                  pr_runs = [i for i in data['workflow_runs']
                             if i['event'].lower() == 'pull_request_review_comment' and
                             i.get('pull_requests') and
                             i['pull_requests'][0]['number'] == int(environ.get("GITHUB_REF").split('/')[-2])]
              return sorted(pr_runs, key=lambda i: i['run_number'], reverse=True)

          def get_status(runs):
              status = 'ok'
              for run in runs:
                  if run['status'] == 'completed':
                      if run['conclusion'] == 'skipped':
                          continue
                      if run['conclusion'] == 'failure':
                          status = 'fail'
                          break
                  if run['conclusion'] == 'success':
                      break
                  if run['status'] in {'in_progress', 'queued'}:
                      status = 'rerun'
                      break
              return status

          while True:
              status = get_status(get_runs())
              if status != 'rerun':
                  break
              sleep(60)
          if status == 'fail':
              exit(1)
